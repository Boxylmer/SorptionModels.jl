var documenterSearchIndex = {"docs":
[{"location":"models/dilation_models/#Dilation-Models","page":"Dilation Models","title":"Dilation Models","text":"","category":"section"},{"location":"models/dilation_models/#Dilation-Overview","page":"Dilation Models","title":"Dilation Overview","text":"","category":"section"},{"location":"models/dilation_models/","page":"Dilation Models","title":"Dilation Models","text":"Dilation models describe how the polymer volume changes as a function of pressure. They all have the following shared functionality.","category":"page"},{"location":"models/dilation_models/","page":"Dilation Models","title":"Dilation Models","text":"Modules = [SorptionModels]\nPages = [\"DilationModels/DilationModels.jl\"]","category":"page"},{"location":"models/dilation_models/#SorptionModels.fit_model-Tuple{SorptionModels.DilationModel, Vararg{Any}}","page":"Dilation Models","title":"SorptionModels.fit_model","text":"fit_model(model, pressures_mpa, fractional_dilations, [uncertainty_method])\n\nFit a dilation model to a set of pressures and fractional dilations. \n\nAny keyword arguments get passed on to the specific model.\n\nuncertainty_method can be any supported method of propagating uncertainty within the model. \n\n\n\n\n\n","category":"method"},{"location":"models/dilation_models/#SorptionModels.predict_dilation-Tuple{Any, Vararg{Any}}","page":"Dilation Models","title":"SorptionModels.predict_dilation","text":"predict_dilation(model::SorptionModel, args...)\n\nPredict fractional dilation with a dilation model. Predictions are generally returned in the format of a vector of values corresponding to an input of a vector of pressures.\n\n\n\n\n\n","category":"method"},{"location":"models/dilation_models/#SorptionModels.predict_dilation_derivative-Tuple{SorptionModels.DilationModel, Any}","page":"Dilation Models","title":"SorptionModels.predict_dilation_derivative","text":"Get the derivative of a dilation vs pressure curve at a given pressure.\n\n\n\n\n\n","category":"method"},{"location":"models/dilation_models/#Dual-Mode-Dilation","page":"Dilation Models","title":"Dual Mode Dilation","text":"","category":"section"},{"location":"models/dilation_models/","page":"Dilation Models","title":"Dilation Models","text":"Modules = [SorptionModels]\nPages = [\"DilationModels/DualModeDilation.jl\"]","category":"page"},{"location":"models/dilation_models/#SorptionModels.fit_model","page":"Dilation Models","title":"SorptionModels.fit_model","text":"fit_model(::DualModeDilation, pressures_mpa, frac_dilations, uncertainty_method=nothing; kwargs...)\n\nFit the dilation data to an dual mode dilation model, using a dual mode model previoulsy fit to concentration and pressure data. \n\nDilation is described by two additional parameters, V_D and f using the following model:\n\nDeltaV  V_0 = V_D (k_D cdot p + fracf C_H^bp1+bp)\n\nV_D represents the effective condensed penetrant molar volume.\nf represents an empirical fit describing how much the langmuir mode participates in dilation.\n\nJ.D. Moon, M. Galizia, H. Borjigin, R. Liu, J.S. Riffle, B.D. Freeman, D.R. Paul, Water Vapor Sorption, Diffusion, and Dilation in Polybenzimidazoles, Macromolecules. 51 (2018) 7197–7208. https://doi.org/10.1021/acs.macromol.8b01659.\n\n\n\n\n\n","category":"function"},{"location":"models/dilation_models/#Empirical-Dilation","page":"Dilation Models","title":"Empirical Dilation","text":"","category":"section"},{"location":"models/dilation_models/","page":"Dilation Models","title":"Dilation Models","text":"Modules = [SorptionModels]\nPages = [\"DilationModels/EmpiricalDilation.jl\"]","category":"page"},{"location":"models/dilation_models/#SorptionModels.fit_model-2","page":"Dilation Models","title":"SorptionModels.fit_model","text":"fit_model(::EmpiricalDilation, pressures_mpa, frac_dilations, uncertainty_method=nothing; n_params=3, kwargs...)\n\nFit the dilation data to an empirical dilation model with no physical meaning. This model is intended to fit any dilation curve given enough parameters.  The user may specify up to 4 empirical paramteres. Loosely, the use of each parameter is as follows:\n\nn_params = 1: Linear dilation\nn_params = 2: Naive dual mode like dilation\nn_params = 3: Dual mode like dilation\nn_params = 4: Dual mode like dilation with concave down or tapering behavior permitted\n\nIf using uncertainty_method (:JackKnife or :Hessian implemented), each extra parameter will greatly increase the resulting uncertainty, as this model is completely empirical.\n\n\n\n\n\n","category":"function"},{"location":"models/transient_models/#Transient-Sorption-Models","page":"Transient Models","title":"Transient Sorption Models","text":"","category":"section"},{"location":"models/transient_models/","page":"Transient Models","title":"Transient Models","text":"All transient models share the following functionality","category":"page"},{"location":"models/transient_models/","page":"Transient Models","title":"Transient Models","text":"Modules = [SorptionModels]\nPages = [\"TransientSorptionModels/TransientSorptionModels.jl\"]","category":"page"},{"location":"models/transient_models/#MembraneBase.rss-Tuple{SorptionModels.TransientSorptionModel, MembraneBase.TransientStepData}","page":"Transient Models","title":"MembraneBase.rss","text":"MembraneBase.rss(sorptionmodel::TransientSorptionModel, step_data::TransientStepData)\n\nDetermine how well a model predicts transient sorption by the sum of squared residuals.\n\n\n\n\n\n","category":"method"},{"location":"models/transient_models/#SorptionModels.fit_transient_sorption_model-Tuple{MembraneBase.TransientStepData, Any}","page":"Transient Models","title":"SorptionModels.fit_transient_sorption_model","text":"fit_transient_sorption_model(\n    step_data::TransientStepData, model; custom_initial_params=nothing, interpolation_method=nothing, interpolation_datapoints=1000, \n    uncertainty_method=nothing, num_uncertainty_resamples=20, resampling_mode=false)\n\nArguments\n\nstep_data::TransientStepData: See TransientStepDatain MembraneBase.jl\nmodel: Type of transient sorption model to fit the step_data to. Available options are:\nFickianSorption()\nBerensHopfenbergSorption()\nModifiedBerensHopfenbergSorption()\n\nOptional Arguments\n\ncustom_initial_params::Vector: Vector of initial guesses to start with. Must match the number of parameters in the model.\nThese parameters are linearized in their parameter space. Make sure you understand the linearization of the model parameters before you try to specify custom initial guesses. \ninterpolation_method: See resample in TransientStepData.\ninterpolation_datapoints::Integer: Number of data points to interpolate to, see above. \nuncertainty_method: currently only supports nothing and the :Bootstrap method of determining uncertainty.\nnum_uncertainty_resamples: Number of times to resample for determining the uncertainty of the model fit (if applicable).\ne.g., for :Bootstrap, this would be the number of times the data is randomly resampled and refit.\nresampling_mode: For internal use with Optim.jl and resampling. Do not modify this value. \nThis will return the linearized parameter fittings in lieu of the normal model objects. \n\n\n\n\n\n","category":"method"},{"location":"models/transient_models/#SorptionModels.get_diffusivity-Tuple{SorptionModels.TransientSorptionModel, Number}","page":"Transient Models","title":"SorptionModels.get_diffusivity","text":"get_diffusivity(model::TransientSorptionModel, semi_thickness_cm::Number)\n\nGet the diffusivity of the polymer described by the transient sorption model. \n\nThe semi-thickness (half of the polymer thickness, in cm) of the polymer used to collect the sorption data is required.\n\n\n\n\n\n","category":"method"},{"location":"models/transient_models/#SorptionModels.predict_sorption-Tuple{SorptionModels.TransientSorptionModel, AbstractVector{<:Number}}","page":"Transient Models","title":"SorptionModels.predict_sorption","text":"predict_sorption(sorptionmodel::TransientSorptionModel, time_seconds::AbstractVector{<:Number})\n\nPredict the amount of dimensionless sorption that has occurred at time time_seconds according to the transient sorption model.\n\nnote: Note\nYou can also specify a single time instead of a vector of times.  When predicting this way, you can additionally use the keyword argument iters, which will change the default number of iterations used to solve the transient sorption prediction.  It is not recommended to modify this default value. \n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#Empirical-Sorption-Models","page":"Empirical Models","title":"Empirical Sorption Models","text":"","category":"section"},{"location":"models/empirical_models/#Dual-Mode","page":"Empirical Models","title":"Dual Mode","text":"","category":"section"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"C = k_D cdot p + fracC_H^bp1 + bp","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"The Dual Mode model is a semi-empirical model that combines Henry's Law (k_D cdot p) with a Langmuir-Hinshelwood-like adsorption model (fracC_H^bp1 + bp) to describe sorption in glassy polymers. It has some predictive power and is widely used in the membrane field. ","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"Modules = [SorptionModels]\nPages   = [\"SorptionModels/DualMode.jl\"]","category":"page"},{"location":"models/empirical_models/#SorptionModels.fit_model-Tuple{DualMode, MembraneBase.IsothermData}","page":"Empirical Models","title":"SorptionModels.fit_model","text":"fit_model(DualMode(), isotherm::IsothermData, [uncertainty_method=nothing], [apply_weights=false], [use_fugacity=false])\n\nFit the dual mode model to the pressures and concentrations present in the isotherm. \n\nOptions\n\nFor determining the uncertainty of the model parameters, the :JackKnife, and :Bootstrap methods are available. \napply_weights will use a weighted nonlinear regression method to solve the parameters, given that Measurement types are used somewhere in the data. \nuse_fugacity will fit the model to fugacities instead of pressures (they should be present in the isotherm data).  \n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.infinite_dilution_solubility-Tuple{DualModeModel}","page":"Empirical Models","title":"SorptionModels.infinite_dilution_solubility","text":"infinite_dilution_solubility(dm::DualModeModel)\n\nGet the infinite dilution solubility coefficient in ((CC/CC) / MPa))\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.predict_concentration-Tuple{AbstractVector{<:DualModeModel}, AbstractVector{<:Number}}","page":"Empirical Models","title":"SorptionModels.predict_concentration","text":"predict_concentration(::AbstractVector{<:DualModeModel}, partial_pressures_mpa::AbstractVector{<:Number})\n\nPredict mixed gas concentrations using the dual mode mixing rule (langmuir-type competitive sorption) given a set of fit models and corresponding partial pressures. e.g.,      predict_concentration([gas_1_model, gas_2_model, ...], [gas_1_pressure, gas_2_pressure, ...])\n\nnote: Note\npartial_pressures_mpa is a bit of a misnomer. If the model was fit to fugacities, then fugacities should, of course, be specified (in MPa).\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.predict_concentration-Tuple{DualModeModel, AbstractVector}","page":"Empirical Models","title":"SorptionModels.predict_concentration","text":"predict_concentration(::DualModeModel, pressures_mpa::AbstractVector)\n\nPredict a vector of concentrations for a pure dual mode model given a corresponding vector of pressures. Mixed dual mode models aren't implemented yet # todo\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.predict_concentration-Tuple{DualModeModel, Number}","page":"Empirical Models","title":"SorptionModels.predict_concentration","text":"predict_concentration(::DualModeModel, pressure_mpa::Number)\n\nPredict the concentration of a penetrant given a dual mode model and pressure (MPa).\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.predict_pressure-Tuple{DualModeModel, Number}","page":"Empirical Models","title":"SorptionModels.predict_pressure","text":"Predict a pressure (MPa) given a concentration (CC(STP)/CC(Polymer)) according to the Dual Mode model.\n\nThe solved pressure for a single component Dual Mode model is:\n\nP = fracsqrtb^2left(c_h-xright)^2+2bkleft(c+xright)+k^2+bleft(x-cright)-k2bk\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#Flory-Huggins-Dual-Mode","page":"Empirical Models","title":"Flory-Huggins Dual Mode","text":"","category":"section"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"C = φ  ((1-φ) cdot V_pen + fracC_H^bp1 + bp where a = φ * exp((1-φ) + chi * (1-φ)^2), a is activity and chi is the Flory-Huggins interaction paramter. ","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"The Dual Mode model is a semi-empirical model that combines Henry's Law (k_D cdot p) with a Langmuir-Hinshelwood-like adsorption model (fracC_H^bp1 + bp) to describe sorption in glassy polymers. It has some predictive power and is widely used in the membrane field. ","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"Modules = [SorptionModels]\nPages   = [\"SorptionModels/FloryHugginsDualMode.jl\"]","category":"page"},{"location":"models/empirical_models/#SorptionModels.a_predict_concentration-Tuple{FloryHugginsDualModeModel, Number}","page":"Empirical Models","title":"SorptionModels.a_predict_concentration","text":"a_predict_concentration(::FloryHugginsDualModeModel, activity::Number)\n\nPredict the concentration of a penetrant given a flory huggins dual mode model and activity.\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.fit_model-Tuple{FloryHugginsDualMode, MembraneBase.IsothermData, Any}","page":"Empirical Models","title":"SorptionModels.fit_model","text":"fit_model(FloryHugginsDualMode(), isotherm::IsothermData, [uncertainty_method=nothing], [apply_weights=false], [use_fugacity=false])\n\nFit the dual mode model to the pressures and concentrations present in the isotherm. \n\nOptions\n\nFor determining the uncertainty of the model parameters, the :JackKnife, and :Bootstrap methods are available. \napply_weights will use a weighted nonlinear regression method to solve the parameters, given that Measurement types are used somewhere in the data. \nuse_fugacity will fit the model to fugacities instead of pressures (they should be present in the isotherm data).  \n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#GAB","page":"Empirical Models","title":"GAB","text":"","category":"section"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"C = fracC_pkAa(1-ka) cdot (1 - ka - kAa)","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"The GAB model is a pure component model that describes polymer sorption as a function of activity. It excels at vapor sorption, which typically demonstrates a sigmoidally shaped isotherm. Howerver, it is not very predictive, and is usually best suited for use as ","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"an accurate interpolation method, or \nto extract information from the isotherm in the form of the model paramters, which have physical meaning. ","category":"page"},{"location":"models/empirical_models/","page":"Empirical Models","title":"Empirical Models","text":"Modules = [SorptionModels]\nPages   = [\"SorptionModels/GAB.jl\"]","category":"page"},{"location":"models/empirical_models/#SorptionModels.a_predict_concentration-Tuple{GABModel, AbstractVector}","page":"Empirical Models","title":"SorptionModels.a_predict_concentration","text":"a_predict_concentration(gm::GABModel, activities::AbstractVector)\n\nReturns a vector of concentrations predicted by the GAB model for a corresponding vector of activities.\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.a_predict_concentration-Tuple{GABModel, Number}","page":"Empirical Models","title":"SorptionModels.a_predict_concentration","text":"a_predict_concentration(gm::GABModel, activity::Number)\n\nPredict concentration based on a GAB model and given activity. Mixed GAB models aren't implemented due to the empirical nature of the model (and it's lack of predictivity)\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.fit_model-Tuple{GAB, AbstractVector, AbstractVector}","page":"Empirical Models","title":"SorptionModels.fit_model","text":"fit_model(GAB(), activities::AbstractVector, concentrations::AbstractVector; kwargs...)\n\nFit a set of activities and corresponding concentrations (CC/CC) to the GAB model. \n\nsee the above function for applicable key words.\n\n\n\n\n\n","category":"method"},{"location":"models/empirical_models/#SorptionModels.predict_concentration-Tuple{GABModel, Number}","page":"Empirical Models","title":"SorptionModels.predict_concentration","text":"predict_concentration(gm::GABModel, pressure::Number)\n\nPredict a concentration given a pressure. Note that GAB is fit to activity, so you will need to specify a pressure_conversion_function(pressure::Number) -> activity::Number when fitting the model. See fit_gab_model\n\n\n\n\n\n","category":"method"},{"location":"models/fundamental_models/#Fundamental-Sorption-Models","page":"Fundamental Models","title":"Fundamental Sorption Models","text":"","category":"section"},{"location":"models/fundamental_models/#NELF","page":"Fundamental Models","title":"NELF","text":"","category":"section"},{"location":"models/fundamental_models/","page":"Fundamental Models","title":"Fundamental Models","text":"The NELF model is a fundamental model that describes sorption in polymers through lattice fluid equations of state. The actual underlying equation of state ","category":"page"},{"location":"models/fundamental_models/","page":"Fundamental Models","title":"Fundamental Models","text":"Modules = [SorptionModels]\nPages = [\"SorptionModels/NELF.jl\"]","category":"page"},{"location":"models/fundamental_models/#SorptionModels.NELFModel","page":"Fundamental Models","title":"SorptionModels.NELFModel","text":"NELFModel(bulk_model, polymer_model, polymer_dry_density)\n\nCreate a NELF sorption model, using two equations of state, one representing the bulk phase and one representing the polymer phase. \n\nNotes:\n\nThe polymer_dry_density should reflect the density of the pure polymer at STP. \nRequires that these models contain the polymer is the first index when referencing compositions and interaction parameters. The remaining indexes must match penetrants in the predictions functions.\n\nF. Doghieri, G.C. Sarti, Nonequilibrium Lattice Fluids: A Predictive Model for the Solubility in Glassy Polymers, Macromolecules. 29 (1996) 7885–7896. https://doi.org/10.1021/ma951366c.\n\n\n\n\n\n","category":"type"},{"location":"models/fundamental_models/#SorptionModels.fit_kij-Tuple{NELF, AbstractVector{<:MembraneBase.IsothermData}, AbstractVector{<:Number}, AbstractVector{<:Number}}","page":"Fundamental Models","title":"SorptionModels.fit_kij","text":"fit_kij(NELF(), isotherms, bulk_parameters, polymer_parameters; [interpolation_model]=DualMode(), [kij_fit_p_mpa]=1e-4)\n\nFind the best kij and ksw parameters for the NELF model according to the Sanchez Lacombe EOS. \n\nArguments\n\nisotherms: Vector of IsothermData structs using the polymer in question with only one kind of component. Temperature, pressure, density, and concentration must be provided.\nbulk_parameters: vector of the gas or vapor's characteristic parameters, in the format of [p★_mpa, t★_k, ρ★_g_cm3, mw_g_mol].\npolymer_parameters: vector of the polymer's characteristic parameters, in the format of [p★_mpa, t★_k, ρ★_g_cm3, mw_g_mol].\n\n\n\n\n\n","category":"method"},{"location":"models/fundamental_models/#SorptionModels.fit_model-Tuple{NELF, AbstractVector{<:MembraneBase.IsothermData}, Any}","page":"Fundamental Models","title":"SorptionModels.fit_model","text":"fit_model(::NELF, model_choice, isotherms, bulk_phase_characteristic_params, [polymer_molecular_weight]; [custom_densities], [initial_search_resolution], [uncertainty_method])\n\nFind the EOS parameters of a polymer from a vector of IsothermDatas using the NELF model. \n\nArguments\n\nmodel_choice: MembraneEOS model to use\nisotherms: Vector of IsothermData structs using the polymer in question. Temperature, pressure, density, and concentration must be provided.\nbulk_phase_characteristic_params: Vector of pure characteristic parameter vectors following the same order as the isotherms. \nE.g., for Sanchez Lacombe and two input isotherms, bulk_phase_characteristic_params = [[p★_1, t★_1, ρ★_1, mw_1], [p★_2, t★_2, ρ★_2, mw_2]]\npolymer_molecular_weight: A known molecular weight for the polymer (otherwise a default, arbitrarily large value is assumed)\ncustom_densities: An array (matching the dimensions of the input isotherms) of densities to use instead of the ones in the isotherm data provided. \nuncertainty_method: Calculate the uncertainty of the parameters from the fitting. For NELF, the Hessian method is currently the only one implemented.\n\n\n\n\n\n","category":"method"},{"location":"models/fundamental_models/#SorptionModels.scan_for_starting_point_and_bounds_3_dims","page":"Fundamental Models","title":"SorptionModels.scan_for_starting_point_and_bounds_3_dims","text":"scan_for_starting_point_and_bounds_3_dims(target_function::Function, naive_lower::Vector{Float64}, naive_lower::Vector{Float64}, resolutions=missing; return_grid=false, verbose=true)\n\nSearch for a vector of parameters, bounded by naive_lower and naive_lower, that is closest to minimizing a target_function by trying every possible value in a grid of resolutions. \n\nresolutions can be a vector of the same length as the bounds and arguments to the target_function. If a single integer is passed, it will assume you want the same resolution on all input dimensions.\nThis search algorithm assumes that the targetfunction contains one obvious local minima, but is robust to NaN, missing, and nothing output from `targetfunction`.\n\nReturns min_results, min_args, lower_bounds, upper_bounds, or rather, the output of the function that was searched, the argument vector to get said output, and the lower and upper bounds in which a better solution may exist. Returns only the error grid that was evaluated and skips finding any other results if return_grid is true. (used for diagnostic purposes)\n\nExample\n\nfunction expensive_func(x)\n    return (x[1]-15)^2 + (x[2]-10)^2 + (x[3]-12)^2\nend\n@show scan_for_starting_point_and_bounds_3_dims(expensive_func, (1.0, 1.0, 1.), (20., 20., 20.), (10, 11, 12); verbose=true)\n\n\n\n\n\n\n\n","category":"function"},{"location":"models/fundamental_models/#DGRPT","page":"Fundamental Models","title":"DGRPT","text":"","category":"section"},{"location":"models/fundamental_models/","page":"Fundamental Models","title":"Fundamental Models","text":"The dry glass reference perturbation theory (DGRPT) model attempts to improve the NELF model by predicting polymer swelling rather than being supplied (or fitting) a swelling coefficient for each component in the polymer phase. ","category":"page"},{"location":"models/fundamental_models/","page":"Fundamental Models","title":"Fundamental Models","text":"Modules = [SorptionModels]\nPages = [\"SorptionModels/DGRPT.jl\"]","category":"page"},{"location":"models/fundamental_models/#SorptionModels.DGRPTModel","page":"Fundamental Models","title":"SorptionModels.DGRPTModel","text":"DGRPTModel(bulk_model, polymer_model, polymer_dry_density)\n\nCreate a DGRPT sorption model, using two equations of state, one representing the bulk phase and one representing the polymer phase. \n\nNotes:\n\nThe polymer_dry_density should reflect the density of the pure polymer at STP. \nRequires that these models contain the polymer is the first index when referencing compositions and interaction parameters. The remaining indexes must match penetrants in the predictions functions.\n\nB.D. Marshall, R. Mathias, R.P. Lively, B.A. McCool, Theoretically Self-Consistent Nonequilibrium Thermodynamics of Glassy Polymer Theory for the Solubility of Vapors and Liquids in Glassy Polymers, Ind. Eng. Chem. Res. 60 (2021) 13377–13387. https://doi.org/10.1021/acs.iecr.1c02194.\n\n\n\n\n\n","category":"type"},{"location":"model analyses/#Model-Analyses","page":"Model Analyses","title":"Model Analyses","text":"","category":"section"},{"location":"model analyses/","page":"Model Analyses","title":"Model Analyses","text":"These analyses provide further downstream interpretation of models, and often extend them in some way.  They also nearly all have associated writing functions for easy output. (See Writer Methods)","category":"page"},{"location":"model analyses/","page":"Model Analyses","title":"Model Analyses","text":"Modules = [SorptionModels]\nPages = [\n    \"ModelAnalyses/DualModeDesorption.jl\",\n    \"ModelAnalyses/IsostericHeatOfSorption.jl\",\n    \"ModelAnalyses/WebbIsostericHeat.jl\",\n    \"ModelAnalyses/MobilityFactor.jl\",\n    \"ModelAnalyses/MolarVolume.jl\",\n    \"ModelAnalyses/PartialImmobilization.jl\",\n    \"ModelAnalyses/ThermoFactor.jl\",\n    \"ModelAnalyses/VantHoffDualMode.jl\", \n    \"ModelAnalyses/ZimmLundberg.jl\",\n    ]","category":"page"},{"location":"model analyses/#SorptionModels.DualModeDesorption-Tuple{MembraneBase.IsothermData}","page":"Model Analyses","title":"SorptionModels.DualModeDesorption","text":"DualModeDesorption(\n    isotherm::IsothermData; \n    [use_fugacity=false], \n    [uncertainty_method=nothing], \n    [naive=false], \n    [share_b=true], \n    [verbose=false]\n)\n\nFit two DualMode models to an isotherm which has both sorbing and desorbing data points. \n\nThis function assumes that the isotherm has exactly one sorbing run followed by exactly one desorbing run. Problems may occur if the isotherm does multiple sorbing -> desorbing transitions.\n\nOptional Arguments:\n\nuse_fugacity: Default: false. Whether or not to fit the models using the isotherms fugacity field rather than pressure. \nuncertainty_method: Default: nothing.  Supports :JackKnife uncertainty.\nnaive: Default: false. If true, will fit the two isotherms completely independently.\nshare_b: Default: true. Whether or not the sorbing and desorbing dual mode models will share an affinity parameter. This reduces the model to 5 total fitted parameters and is presumed to be more physically realistic.\nverbose: Default: false. If true, will report warnings if some combination of the previous arguments are issue-prone. \n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.WebbIsostericHeatAnalysis","page":"Model Analyses","title":"SorptionModels.WebbIsostericHeatAnalysis","text":"WebbIsostericHeatAnalysis(isotherms::AbstractVector{<:IsothermData}, [eosmodel=missing]; \n    [model=DualMode()], \n    [num_points=25],\n    [use_vant_hoff_constraints=false]\n)\n\nWork in progress. Calculate the isosteric heat of sorption (DeltaH_sorption) from a vector of isotherms as a function of concentration using a new derivation that utilizes compressability and molar volume rather than pressure. This derivation is worked out with entropies of sorption in mind, allowing for the calculation of the free energy of sorption given that the entropies are valid.  \n\neosmodel: A function that returns compressibility z when supplied a P (MPa) and T (K), i.e., z(P, T). When specified, will use this instead of assuming ideal behavior. \nIf the Dual Mode model is used, use_vant_hoff_constraints will constrain the dual mode fittings with respect to temperature. (see VantHoffDualModeAnalysis)\n\n\n\n\n\n","category":"type"},{"location":"model analyses/#SorptionModels.MobilityFactorAnalysis-Tuple{AbstractVector{<:Number}, ThermodynamicFactorAnalysis}","page":"Model Analyses","title":"SorptionModels.MobilityFactorAnalysis","text":"MobilityFactorAnalysis(diffusivities::AbstractVector{<:Number}, tfa::ThermodynamicFactorAnalysis)\n\nDeconvolute an isotherm and already-known diffusivity values into their kinetic and thermodynamic components.\n\nArguments\n\ndiffusivities::AbstractVector{<:Number}: Vector of diffusivity values in cm^2s  \ntfa::ThermodynamicFactorAnalysis: Already evaluated ThermodynamicFactorAnalysis\n\nSee ThermodynamicFactorAnalysis(@ref)\n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.MobilityFactorAnalysis-Tuple{AbstractVector{<:Number}, Vararg{Any}}","page":"Model Analyses","title":"SorptionModels.MobilityFactorAnalysis","text":"MobilityFactorAnalysis(diffusivities::AbstractVector{<:Number}, thermo_args...)\n\nDeconvolute an isotherm and already-known diffusivity values into their kinetic and thermodynamic components.\n\nArguments\n\ndiffusivities::AbstractVector{<:Number}: Vector of diffusivity values in cm^2s  \nthermo_args...: Arguments that would noramlly be passed to the ThermodynamicFactorAnalysis\n\nSee ThermodynamicFactorAnalysis(@ref)\n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.MobilityFactorAnalysis-Tuple{MembraneBase.IsothermData, AbstractVector{<:SorptionModels.TransientSorptionModel}, Number}","page":"Model Analyses","title":"SorptionModels.MobilityFactorAnalysis","text":"MobilityFactorAnalysis(isotherm::IsothermData, transient_sorption_models::AbstractVector{<:TransientSorptionModel}, semi_thickness_cm::Number)\n\nDeconvolute a vector of fitted transient sorption models, the corresponding equilibrium isotherm, and the semi-thickness of the polymer sample into a MobilityFactorAnalysis object.\n\nArguments\n\nisotherm::IsothermData: Should be a single-component isotherm. If multiple components are present, only the first component will be deconvoluted.\ntransient_sorption_models::AbstractVector{<:TransientSorptionModel}: Vector of TransientSorptionModel objects. You need at least as many isotherm steps as transients, but you can supply fewer transients if you don't have them for every isotherm step.\nsemi_thickness_cm::Number: Half (semi) thickness of the polymer sample used in the sorption experiment in cm.  \n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.MolarVolumeAnalysis","page":"Model Analyses","title":"SorptionModels.MolarVolumeAnalysis","text":"MolarVolumeAnalysis(model::SorptionModel, pressures_mpa, frac_dilations, [uncertainty_method=nothing], [n_interp=30], [n_params=3])\n\nApply the calculation discussed in\n\nR. Raharjo, B. Freeman, E. Sanders, Pure and mixed gas CH4 and n-C4H10 sorption and dilation in poly(dimethylsiloxane), Journal of Membrane Science. 292 (2007) 45–61. https://doi.org/10.1016/j.memsci.2007.01.012.\n\nto calculate the partial molar volume of a component in a polymer phase.\n\nThe model in question should take true pressures and not fugacities. \nThe isothermal compressibility factor (units of MPa^-1) is neglected by default. It is used for calculating the change in volume due to external pressure and can generally be neglected for condensible gasses, low pressure liquids, and vapors. For permanent gasses and high pressure liquids, ensure this can be neglected or specify it's value.\nA modified dual mode model is used to approximate the derivative of the dilation data. If you're uncertainty is very high and you're using :Hessian uncertainties, it's likely you're overfitting and should use :JackKnife instead, as it will more adequately represent the uncertainty in your fit.  \nuncertainty_method\nn_interp will determine the number of values to interpolate to\nnparams will specify the number of fitted parameters to use when fitting a continuous dilation function. Currently only 3 and 4 are supported. Start with 3, and if the dilation data is non-monotonic or you're dealing with some difficult data, move to 4. Be aware this will increase the degrees of freedom in the fitting and thus the uncertainty associated with it (see `uncertaintymethod`).\n\n\n\n\n\n","category":"type"},{"location":"model analyses/#SorptionModels.PartialImmobilizationModel-Tuple{DualModeModel, AbstractVector{<:Number}, AbstractVector{<:Number}}","page":"Model Analyses","title":"SorptionModels.PartialImmobilizationModel","text":"PartialImmobilizationModel(::DualModeModel, ::AbstractVector{<:Number}, ::AbstractVector{<:Number}; [temperature_k])\n\nApply the method discussed in:\n\nP. Li, T.S. Chung, D.R. Paul, Gas sorption and permeation in PIM-1, Journal of Membrane Science. 432 (2013) 50–57. https://doi.org/10.1016/j.memsci.2013.01.009.\n\nto separate permeabilities into langmuir and henry mode diffusivities given a Dual Mode sorption model.\n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.ThermodynamicFactorAnalysis","page":"Model Analyses","title":"SorptionModels.ThermodynamicFactorAnalysis","text":"ThermodynamicFactorAnalysis(pressures, model, ρ_pol, mw_pen)\n\nSpecial case analysis that provides thermodynamic factors implemented by specific sorption models that do not require extra information. \n\nArguments\n\npressures::AbstractVector: List of pressures (MPa) to evaluate the thermodynamic factor at.\nmodel::SorptionModel: SorptionModel that supports thermodynamic_factor. \nρ_pol::Number: Polymer density in g/cm3.\nmw_pwn::Number: Penetrant molecular weight in g/mol. \n\nCaveats to supported models\n\nDual Mode: Assumes ideal activity change behavior unless z is specified, analytically derived. Activity will be with respect to STP\n\n\n\n\n\n","category":"type"},{"location":"model analyses/#SorptionModels.ThermodynamicFactorAnalysis-Tuple{AbstractVector, Number, Number, SorptionModels.SorptionModel, Function}","page":"Model Analyses","title":"SorptionModels.ThermodynamicFactorAnalysis","text":"ThermodynamicFactorAnalysis(pressures, ρ_pol, mw_pen, sorptionmodel, activity_function)\n\nExtract the thermodynamic factors of sorption data (see ThermodynamicFactorAnalysis method using an isotherm, sorptionmodel, activity_function). This function allows for manual control of pressures, which is often necessary when using tabulated diffusivities rather than the isotherm's pressures. \n\nArguments\n\npressures::AbstractVector: List of pressures (MPa) to evaluate the thermodynamic factor at.\nρ_pol::Number: Polymer density in g/cm3.\nmw_pwn::Number: Penetrant molecular weight in g/mol. \nsorptionmodel::SorptionModel: SorptionModel that supports predict_pressure.\nactivity_function::Function: Function which takes a pressure in MPa and returns an activity. \n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.ThermodynamicFactorAnalysis-Tuple{MembraneBase.IsothermData, SorptionModels.SorptionModel, Function}","page":"Model Analyses","title":"SorptionModels.ThermodynamicFactorAnalysis","text":"ThermodynamicFactorAnalysis(isotherm, sorptionmodel, activity_function)\n\nExtract the thermodynamic factors of an isotherm using analytical derivatives and exact activities from an equation of state (activity_function).\n\nArguments\n\nisotherm::IsothermData: Should be a single-component isotherm. If multiple components are present, only the first component will be used.\nsorptionmodel::SorptionModel: SorptionModel that supports predict_pressure.\nactivity_function::Function: Function which takes a pressure in MPa and returns an activity. \n\nIsotherms in this function will need pressures, polymer density, and penetrant molecular weight.\n\nConcentrations used in this method will be predicted concentrations from the SorptionModel, not tabulated concentrations. \nThe pressures used here will be found in the isotherm, so if you're using this with MobilityFactorAnalysis(@ref), you likely want to specify pressures manually. \n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.VantHoffDualModeAnalysis-Tuple{AbstractVector{<:MembraneBase.IsothermData}}","page":"Model Analyses","title":"SorptionModels.VantHoffDualModeAnalysis","text":"VantHoffDualModeAnalysis(isotherms::AbstractVector{<:IsothermData}; use_fugacity=false)\n\nFit a set of isotherms (using the same gas and polymer) at varying temperatures to the Dual Mode model.  If use_fugacity is true, the solver will fit to fugacities within the isotherms rather than pressures.\n\nReturns a VantHoffDualModeModel struct containing contextual information on the fittings.  Notable variables within it are:\n\nch0_final: Converged Ch0 value.\nb0_final: Converged b0 value.\nkd0_final: Converged kd0 value.\nmch_final: Converged mch value.\nΔHb_final: Converged ΔHb value.\nΔHkd_final: Converged ΔHkd value.\nfinal_rss: Total sum of squared weighted residuals after convergence.\nfinal_models: Vector of Dual Mode models corresponding to the original order of the isotherms given.\ncovariance_matrix: Matrix of covariances between individual parameters above (indexed in the original order they were listed)\n\n\n\n\n\n","category":"method"},{"location":"model analyses/#SorptionModels.ZimmLundbergAnalysis-Tuple{GABModel, Any, Number}","page":"Model Analyses","title":"SorptionModels.ZimmLundbergAnalysis","text":"ZimmLundbergAnalysis(::sorption_model, activities, pen_molar_volume::Number)\n\nApply the clustering analysis described originally in: B.H. Zimm, J.L. Lundberg, Sorption of Vapors by High Polymers, J. Phys. Chem. 60 (1956) 425–428. https://doi.org/10.1021/j150538a010.\n\nTo empirically determine whether clustering occurs in the polymer at given activities. \n\nThe sorption_model must take activities and return concentration in CC/CC\nThe penetrant molar volume (pen_molar_volume) must be in units of cm^3/mol.\n\n\n\n\n\n","category":"method"},{"location":"#SorptionModels.jl","page":"Home","title":"SorptionModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Get more out of your sorption data","category":"page"},{"location":"","page":"Home","title":"Home","text":"SorptionModels.jl provides a number of models and which describe solubility in polymers, as well as various analyses you can perform to extract information from your models once they are fit to experimental data.","category":"page"},{"location":"#Using-this-package","page":"Home","title":"Using this package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Most methods are designed to operate on isotherms. This is accessed, computationally speaking, through IsothermData structs, defined in MemrbaneBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nSome models have convenience methods that circumvent the need to wrap data in an isotherm, but you are more likely to encounter user mistakes by doing so. For example, when fitting Dual Mode models for use in a PartialImmobilizationModel analysis, you must be careful to ensure you're using fugacity instead of pressure. Ensuring that you're fitting with fugacities is as easy as setting the keyword use_fugacity=true when using IsothermData structs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Models are broken down into three categories, each serving a particular range of purposes with some overlap:","category":"page"},{"location":"#[Empirical-Sorption-Models](@ref)","page":"Home","title":"Empirical Sorption Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Models which do not require state parameters. The parameters you fit from these models will typically have physical meaning which can be useful in understanding how sorption behaves in the polymer, but the models themselves are generally not incredibly predictive unless heavily leveraged against carefully taken experimental data (such as multiple isotherms at distinct temperatures). These models can also serve as accurate interpolation (and possibly extrapolation / noise suppression) tools. ","category":"page"},{"location":"#[Fundamental-Sorption-Models](@ref)","page":"Home","title":"Fundamental Sorption Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Models which are described by an equation of state such as Sanchez Lacombe or PC-SAFT. These models, in stark contrast to empirical models, are predictive by nature. That is to say, they will generally not align perfectly to experimental data, but will generate values without much (if any) experimental data to go off of. They are also useful for predicting the solubility of mixed systems. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To learn how to set up the equations of state that act as the engine of these models, see SorptionModels.jl.","category":"page"},{"location":"#[Transient-Sorption-Models](@ref)","page":"Home","title":"Transient Sorption Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Special models which describe time-dependent sorption into a flat polymer sheet (termed \"slab\") geometry. Useful for estimating diffusivity using measurements of sorption over time (termed \"sorption kinetics\"), if such data is available. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThough all models are fit via fit_model, each particular model may require different types of inputs.  For example, the Dual Mode Model generally fits concentration to pressure or fugacity data, while the GAB Model fits concentration to activity. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Obviously, all sorption models share the common aim to predict penetrant-polymer solubility. Therefore, every sorption model will have a few shared functions that can be understood without knowing individual model details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All models are fit via fit_model and generate data through predict_sorption. Generally, you can hand an isotherm (from MembraneBase) and the right supplementary information (if needed) over to... ","category":"page"},{"location":"","page":"Home","title":"Home","text":"SorptionModels.fit_model(model::SorptionModels.SorptionModel, ::SorptionModels.IsothermData)","category":"page"},{"location":"#SorptionModels.fit_model-Tuple{SorptionModels.SorptionModel, MembraneBase.IsothermData}","page":"Home","title":"SorptionModels.fit_model","text":"fit_model(model, ::IsothermData)\n\nFit a sorption model to an isotherm. If the data required for the model is not in the isotherm, an error message will be returned. \n\nAny keyword arguments get passed on to the specific model.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"...then immediately get the fitted isotherm back through...","category":"page"},{"location":"","page":"Home","title":"Home","text":"SorptionModels.predict_concentration","category":"page"},{"location":"#SorptionModels.predict_concentration","page":"Home","title":"SorptionModels.predict_concentration","text":"predict_concentration(model::SorptionModel, args...)\n\nPredict concentration with a sorption model. Predictions are generally returned in the format of a vector of values corresponding to an input of a vector of pressures.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"These are utility / unexported functions for those wanting to learn or extend SorptionModels.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"TODO","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"writers/#Writer-Methods","page":"Analysis Writers","title":"Writer Methods","text":"","category":"section"},{"location":"writers/","page":"Analysis Writers","title":"Analysis Writers","text":"Modules = [SorptionModels]\nPages = [\n    \"Writers/WriteDualModeDesorption.jl\",\n    \"Writers/WriteIsostericHeat.jl\",\n    \"WriteMobilityOrThermoFactor.jl\",\n    \"Writers/WriteMolarVolume.jl\",\n    \"Writers/WritePartialImmobilization.jl\",\n    \"Writers/WriteVantHoffDualMode.jl\", \n    \"Writers/WriteZimmLundberg.jl\",\n    \"Writers/WriteMobilityFactor.jl\",\n    \"Writers/WriteThermoFactor.jl\",\n]","category":"page"},{"location":"writers/#SorptionModels.write_analysis-Tuple{DualModeDesorption, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::DualModeDesorption, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::DualModeDesorption, filepath::AbstractString; [name])\n\nWrite a Dual Mode Desorption analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee DualModeDesorption\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{SorptionModels.AbstractIsostericHeatAnalysis, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::AbstractIsostericHeatAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::AbstractIsostericHeatAnalysis, filepath::AbstractString; [name])\n\nWrite an isosteric heat analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetnameis not provided, default names are created. See [IsostericHeatAnalysis`](@ref)\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{ThermodynamicFactorAnalysis, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::MobilityFactorAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::MobilityFactorAnalysis, filepath::AbstractString; [name])\nwrite_analysis(analysis::ThermodynamicFactorAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::ThermodynamicFactorAnalysis, filepath::AbstractString; [name])\n\nWrite a ThermoFactorAnalysis or MobilityFactorAnalysis (which contains a thermodynamic factor analysis) out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee ThermodynamicFactorAnalysis and MobilityFactorAnalysis\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{MolarVolumeAnalysis, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::MolarVolumeAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::MolarVolumeAnalysis, filepath::AbstractString; [name])\n\nWrite a molar volume analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee MolarVolumeAnalysis\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{PartialImmobilizationModel, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::PartialImmobilizationModel, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::PartialImmobilizationModel, filepath::AbstractString; [name])\n\nWrite a partial immobilization analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee PartialImmobilizationModel\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{VantHoffDualModeAnalysis, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::VantHoffDualModeAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::VantHoffDualModeAnalysis, filepath::AbstractString; [name])\n\nWrite a Vant Hoff Dual Mode analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee VantHoffDualModeAnalysis\n\n\n\n\n\n","category":"method"},{"location":"writers/#SorptionModels.write_analysis-Tuple{ZimmLundbergAnalysis, XLSX.XLSXFile}","page":"Analysis Writers","title":"SorptionModels.write_analysis","text":"write_analysis(analysis::ZimmLundbergAnalysis, workbook::XLSX.XLSXFile; [name])\nwrite_analysis(analysis::ZimmLundbergAnalysis, filepath::AbstractString; [name])\n\nWrite a Zimm Lundberg analysis out to a .xlsx workbookor an .xlsxfilepath. If a worksheetname` is not provided, default names are created.\n\nSee ZimmLundbergAnalysis\n\n\n\n\n\n","category":"method"}]
}
